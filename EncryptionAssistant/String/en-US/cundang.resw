<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="button1.Content" xml:space="preserve">
    <value>Encoding</value>
  </data>
  <data name="button2.Content" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="combobox.Header" xml:space="preserve">
    <value>Encryption/decryptmode:</value>
  </data>
  <data name="combobox1.Header" xml:space="preserve">
    <value>Encryption/decryption algorithm:</value>
  </data>
  <data name="mccheckbox1.Content" xml:space="preserve">
    <value>Use the default encryption/decryption key (recommended)</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Application with out of memory cannot encrypt files larger than (390MB), stay tuned for subsequent updates</value>
  </data>
  <data name="String10" xml:space="preserve">
    <value>Please go to the home page to decrypt this file&lt;Version is higher than1.3.711&gt;</value>
  </data>
  <data name="String11" xml:space="preserve">
    <value>Failed to read file version</value>
  </data>
  <data name="String12" xml:space="preserve">
    <value>There is a problem decrypting, please ensure that the decryption key, decryption mode, decrypttheor algorithm correctness, check again. If you've seen this tip many times, please report this question to us in the Feedback Center, thank you</value>
  </data>
  <data name="String13" xml:space="preserve">
    <value>Decryptsuccessful, click on the picture below to save</value>
  </data>
  <data name="String14" xml:space="preserve">
    <value>Please click on the picture above to select the file to decrypt</value>
  </data>
  <data name="String15" xml:space="preserve">
    <value>There was a problem saving the results, please try again. If this prompt still appears after trying again many times, please feed us back to this issue and we will try our best to resolve it, thank you</value>
  </data>
  <data name="String16" xml:space="preserve">
    <value>Save successful</value>
  </data>
  <data name="String17" xml:space="preserve">
    <value>Please encrypt/decrypt first</value>
  </data>
  <data name="String18" xml:space="preserve">
    <value>Congratulations, the key length has reached the required 40 characters</value>
  </data>
  <data name="String19" xml:space="preserve">
    <value>Congratulations, the key length has reached the required 40 characters</value>
  </data>
  <data name="String2" xml:space="preserve">
    <value>The length of the key must be 40, please check the key</value>
  </data>
  <data name="String20" xml:space="preserve">
    <value>Password is too long, should be between 0 to 20 characters</value>
  </data>
  <data name="String21" xml:space="preserve">
    <value>Your passwords do not match</value>
  </data>
  <data name="String3" xml:space="preserve">
    <value>When setting a password, make sure that the password entered twice is the same and is less than 60 characters long</value>
  </data>
  <data name="String4" xml:space="preserve">
    <value>When there is a problem with encryption, please make sure that the encryption key, encryption mode, encryption algorithm is correct, check again. If you've seen this tip many times, please report this question to us in the Feedback Center, thank you</value>
  </data>
  <data name="String5" xml:space="preserve">
    <value>Encryption was successful, click on the picture below to save</value>
  </data>
  <data name="String6" xml:space="preserve">
    <value>Please click on the image above to select the file to encrypt.</value>
  </data>
  <data name="String7" xml:space="preserve">
    <value>Application with out of memory cannot decrypt files larger than (390MB), stay tuned for subsequent updates</value>
  </data>
  <data name="String8" xml:space="preserve">
    <value>The length of the key must be 40, please check the key</value>
  </data>
  <data name="String9" xml:space="preserve">
    <value>When entering a password, make sure that the password is entered twice and is less than 60 characters long</value>
  </data>
  <data name="textblock2.Text" xml:space="preserve">
    <value>1.3.711 Version Encryption/Decrypt</value>
  </data>
  <data name="textblock3.Text" xml:space="preserve">
    <value>Files that need to be encrypted/decrypted</value>
  </data>
  <data name="textblock5.Text" xml:space="preserve">
    <value>Note: To add a password to a file, change the encryption/decryption mode to normal mode. Since the key is made up of 40 0s or 1s, it's easy to misread, so the default key is recommended. And in most cases, encryption/decryption keys and algorithmic errors cannot be detected and are only discovered by you when you are using files. There are multiple /u008 characters at the end of some of the decrypted files, and our extensive testing shows that this will not affect usage, please be assured.</value>
  </data>
  <data name="textblock7.Text" xml:space="preserve">
    <value>Results here, click Save</value>
  </data>
  <data name="textbox2.Header" xml:space="preserve">
    <value>Custom key:</value>
  </data>
  <data name="textbox2.PlaceholderText" xml:space="preserve">
    <value>Click on the button below to enter the key</value>
  </data>
  <data name="textbox3.Header" xml:space="preserve">
    <value>password</value>
  </data>
  <data name="textbox3.PlaceholderText" xml:space="preserve">
    <value>Set an encrypted password, or enter a decryption password</value>
  </data>
  <data name="textbox4.Header" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="textbox4.PlaceholderText" xml:space="preserve">
    <value>Enter the encryption/decryptpassword again</value>
  </data>
</root>